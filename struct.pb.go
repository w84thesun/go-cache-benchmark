// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: struct.proto

package cachebench

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SomeProtoStruct struct {
	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	I          int64  `protobuf:"varint,2,opt,name=I,proto3" json:"I,omitempty"`
	D          int64  `protobuf:"varint,3,opt,name=D,proto3" json:"D,omitempty"`
	B          int64  `protobuf:"varint,4,opt,name=B,proto3" json:"B,omitempty"`
	T1         int64  `protobuf:"varint,5,opt,name=T1,proto3" json:"T1,omitempty"`
	T2         int64  `protobuf:"varint,6,opt,name=T2,proto3" json:"T2,omitempty"`
	Time       int64  `protobuf:"varint,7,opt,name=Time,proto3" json:"Time,omitempty"`
	StringID   string `protobuf:"bytes,8,opt,name=StringID,proto3" json:"StringID,omitempty"`
	Name1      string `protobuf:"bytes,9,opt,name=Name1,proto3" json:"Name1,omitempty"`
	Name2      string `protobuf:"bytes,10,opt,name=Name2,proto3" json:"Name2,omitempty"`
	StringTime string `protobuf:"bytes,11,opt,name=StringTime,proto3" json:"StringTime,omitempty"`
	Type       string `protobuf:"bytes,12,opt,name=Type,proto3" json:"Type,omitempty"`
	Status     string `protobuf:"bytes,13,opt,name=Status,proto3" json:"Status,omitempty"`
	S          string `protobuf:"bytes,14,opt,name=S,proto3" json:"S,omitempty"`
}

func (m *SomeProtoStruct) Reset()      { *m = SomeProtoStruct{} }
func (*SomeProtoStruct) ProtoMessage() {}
func (*SomeProtoStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{0}
}
func (m *SomeProtoStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SomeProtoStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SomeProtoStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SomeProtoStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SomeProtoStruct.Merge(m, src)
}
func (m *SomeProtoStruct) XXX_Size() int {
	return m.Size()
}
func (m *SomeProtoStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_SomeProtoStruct.DiscardUnknown(m)
}

var xxx_messageInfo_SomeProtoStruct proto.InternalMessageInfo

func (m *SomeProtoStruct) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SomeProtoStruct) GetI() int64 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *SomeProtoStruct) GetD() int64 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *SomeProtoStruct) GetB() int64 {
	if m != nil {
		return m.B
	}
	return 0
}

func (m *SomeProtoStruct) GetT1() int64 {
	if m != nil {
		return m.T1
	}
	return 0
}

func (m *SomeProtoStruct) GetT2() int64 {
	if m != nil {
		return m.T2
	}
	return 0
}

func (m *SomeProtoStruct) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SomeProtoStruct) GetStringID() string {
	if m != nil {
		return m.StringID
	}
	return ""
}

func (m *SomeProtoStruct) GetName1() string {
	if m != nil {
		return m.Name1
	}
	return ""
}

func (m *SomeProtoStruct) GetName2() string {
	if m != nil {
		return m.Name2
	}
	return ""
}

func (m *SomeProtoStruct) GetStringTime() string {
	if m != nil {
		return m.StringTime
	}
	return ""
}

func (m *SomeProtoStruct) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SomeProtoStruct) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SomeProtoStruct) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func init() {
	proto.RegisterType((*SomeProtoStruct)(nil), "benchCaches.SomeProtoStruct")
}

func init() { proto.RegisterFile("struct.proto", fileDescriptor_0605f6bcb0ae6db1) }

var fileDescriptor_0605f6bcb0ae6db1 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x3d, 0x4e, 0xf3, 0x40,
	0x10, 0x86, 0x77, 0x9c, 0x9f, 0x2f, 0xd9, 0xe4, 0x0b, 0xd2, 0x0a, 0xa1, 0x11, 0xc5, 0x28, 0xa2,
	0x4a, 0x85, 0x14, 0xc3, 0x09, 0x82, 0x1b, 0x37, 0x08, 0x65, 0x7d, 0x01, 0xc7, 0x5a, 0x91, 0x14,
	0x8e, 0x23, 0x7b, 0x53, 0xd0, 0x71, 0x04, 0xae, 0x40, 0xc7, 0x51, 0x28, 0x5d, 0xa6, 0xc4, 0xeb,
	0x86, 0x32, 0x47, 0x40, 0x1e, 0x87, 0x9f, 0x6e, 0x9e, 0xe7, 0xdd, 0x57, 0xa3, 0x1d, 0x39, 0x2e,
	0x6c, 0xbe, 0x4f, 0xec, 0xf5, 0x2e, 0xcf, 0x6c, 0xa6, 0x46, 0x2b, 0xb3, 0x4d, 0xd6, 0x77, 0x71,
	0xb2, 0x36, 0xc5, 0xd5, 0xab, 0x27, 0xcf, 0x74, 0x96, 0x9a, 0x87, 0x26, 0xd2, 0xfc, 0x4c, 0x4d,
	0xa4, 0x17, 0x06, 0x08, 0x53, 0x98, 0x75, 0x96, 0x5e, 0x18, 0xa8, 0xb1, 0x84, 0x10, 0x3d, 0x46,
	0x08, 0x1b, 0x0a, 0xb0, 0xd3, 0x12, 0x67, 0x0b, 0xec, 0xb6, 0xb4, 0x68, 0x9a, 0xd1, 0x1c, 0x7b,
	0x6d, 0x33, 0x9a, 0x33, 0xfb, 0xd8, 0x3f, 0xb1, 0xaf, 0x94, 0xec, 0x46, 0x9b, 0xd4, 0xe0, 0x3f,
	0x36, 0x3c, 0xab, 0x4b, 0x39, 0xd0, 0x36, 0xdf, 0x6c, 0x1f, 0xc3, 0x00, 0x07, 0x53, 0x98, 0x0d,
	0x97, 0x3f, 0xac, 0xce, 0x65, 0xef, 0x3e, 0x4e, 0xcd, 0x1c, 0x87, 0x1c, 0xb4, 0xf0, 0x6d, 0x7d,
	0x94, 0xbf, 0xd6, 0x57, 0x24, 0x65, 0xdb, 0xe3, 0x0d, 0x23, 0x8e, 0xfe, 0x18, 0xde, 0xfd, 0xb4,
	0x33, 0x38, 0xe6, 0x84, 0x67, 0x75, 0x21, 0xfb, 0xda, 0xc6, 0x76, 0x5f, 0xe0, 0x7f, 0xb6, 0x27,
	0x6a, 0x7e, 0xa5, 0x71, 0xc2, 0x0a, 0xf4, 0xe2, 0xb6, 0xac, 0x48, 0x1c, 0x2a, 0x12, 0xc7, 0x8a,
	0xe0, 0xd9, 0x11, 0xbc, 0x39, 0x82, 0x77, 0x47, 0x50, 0x3a, 0x82, 0x0f, 0x47, 0xf0, 0xe9, 0x48,
	0x1c, 0x1d, 0xc1, 0x4b, 0x4d, 0xa2, 0xac, 0x49, 0x1c, 0x6a, 0x12, 0xab, 0x3e, 0x5f, 0xfb, 0xe6,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x97, 0xec, 0xbb, 0x7d, 0x01, 0x00, 0x00,
}

func (this *SomeProtoStruct) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SomeProtoStruct)
	if !ok {
		that2, ok := that.(SomeProtoStruct)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.I != that1.I {
		return false
	}
	if this.D != that1.D {
		return false
	}
	if this.B != that1.B {
		return false
	}
	if this.T1 != that1.T1 {
		return false
	}
	if this.T2 != that1.T2 {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.StringID != that1.StringID {
		return false
	}
	if this.Name1 != that1.Name1 {
		return false
	}
	if this.Name2 != that1.Name2 {
		return false
	}
	if this.StringTime != that1.StringTime {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.S != that1.S {
		return false
	}
	return true
}
func (this *SomeProtoStruct) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&benchCaches.SomeProtoStruct{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "I: "+fmt.Sprintf("%#v", this.I)+",\n")
	s = append(s, "D: "+fmt.Sprintf("%#v", this.D)+",\n")
	s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	s = append(s, "T1: "+fmt.Sprintf("%#v", this.T1)+",\n")
	s = append(s, "T2: "+fmt.Sprintf("%#v", this.T2)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "StringID: "+fmt.Sprintf("%#v", this.StringID)+",\n")
	s = append(s, "Name1: "+fmt.Sprintf("%#v", this.Name1)+",\n")
	s = append(s, "Name2: "+fmt.Sprintf("%#v", this.Name2)+",\n")
	s = append(s, "StringTime: "+fmt.Sprintf("%#v", this.StringTime)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "S: "+fmt.Sprintf("%#v", this.S)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStruct(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SomeProtoStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SomeProtoStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SomeProtoStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		i -= len(m.S)
		copy(dAtA[i:], m.S)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.S)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.StringTime) > 0 {
		i -= len(m.StringTime)
		copy(dAtA[i:], m.StringTime)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.StringTime)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Name2) > 0 {
		i -= len(m.Name2)
		copy(dAtA[i:], m.Name2)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Name2)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Name1) > 0 {
		i -= len(m.Name1)
		copy(dAtA[i:], m.Name1)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Name1)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StringID) > 0 {
		i -= len(m.StringID)
		copy(dAtA[i:], m.StringID)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.StringID)))
		i--
		dAtA[i] = 0x42
	}
	if m.Time != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x38
	}
	if m.T2 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.T2))
		i--
		dAtA[i] = 0x30
	}
	if m.T1 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.T1))
		i--
		dAtA[i] = 0x28
	}
	if m.B != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.B))
		i--
		dAtA[i] = 0x20
	}
	if m.D != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.D))
		i--
		dAtA[i] = 0x18
	}
	if m.I != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.I))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStruct(dAtA []byte, offset int, v uint64) int {
	offset -= sovStruct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SomeProtoStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovStruct(uint64(m.ID))
	}
	if m.I != 0 {
		n += 1 + sovStruct(uint64(m.I))
	}
	if m.D != 0 {
		n += 1 + sovStruct(uint64(m.D))
	}
	if m.B != 0 {
		n += 1 + sovStruct(uint64(m.B))
	}
	if m.T1 != 0 {
		n += 1 + sovStruct(uint64(m.T1))
	}
	if m.T2 != 0 {
		n += 1 + sovStruct(uint64(m.T2))
	}
	if m.Time != 0 {
		n += 1 + sovStruct(uint64(m.Time))
	}
	l = len(m.StringID)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Name1)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Name2)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.StringTime)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	return n
}

func sovStruct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStruct(x uint64) (n int) {
	return sovStruct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SomeProtoStruct) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SomeProtoStruct{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`I:` + fmt.Sprintf("%v", this.I) + `,`,
		`D:` + fmt.Sprintf("%v", this.D) + `,`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`T1:` + fmt.Sprintf("%v", this.T1) + `,`,
		`T2:` + fmt.Sprintf("%v", this.T2) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`StringID:` + fmt.Sprintf("%v", this.StringID) + `,`,
		`Name1:` + fmt.Sprintf("%v", this.Name1) + `,`,
		`Name2:` + fmt.Sprintf("%v", this.Name2) + `,`,
		`StringTime:` + fmt.Sprintf("%v", this.StringTime) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStruct(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SomeProtoStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SomeProtoStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SomeProtoStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I", wireType)
			}
			m.I = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			m.D = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.D |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			m.B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.B |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T1", wireType)
			}
			m.T1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T2", wireType)
			}
			m.T2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStruct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStruct
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthStruct
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStruct
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStruct(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthStruct
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStruct = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStruct   = fmt.Errorf("proto: integer overflow")
)
